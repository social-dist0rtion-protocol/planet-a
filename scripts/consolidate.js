const { bi, lessThan, add, subtract, multiply } = require("jsbi-utils");
const { bufferToHex, ripemd160, keccak256 } = require("ethereumjs-util");
const ethers = require("ethers");
const LeapProvider = require("leap-provider");
const { Tx, helpers, Input, Output } = require("leap-core");

const erc20ABI = require("../src/contracts/StableCoin.abi");
const earth = require("../src/planeta/contracts/Earth");

const { LeapEthers } = helpers;

const CONFIG = {
  //dryRun: JSON.parse(process.env.DRY_RUN) || false, //Tells you what it would do without actually sending any txs
  provider: process.env.NODE_URL || "https://testnet-node.leapdao.org",
  color: process.env.COLOR || 0,
  utxoNum: parseInt(process.env.UTXO_NUM) || 20, //Number of UTXOs to keep
  //priv: "0x6d57790cf6ce277bcedd95d69ebc1745eb990ee20e1f2d9a7ef2008124b72c53"
  priv: "0xddb15c6ca4996c00ee524ad9c8e5e5e1e8769e01e48f666d2fe2ba98785b59c8"
};
//earth.code = '608060405234801561001057600080fd5b50600436106100445760e060020a60003504635ca740ab811461004957806394d615b514610086578063d4349137146100b8575b600080fd5b6100846004803603608081101561005f57600080fd5b50600160a060020a038135169060ff602082013516906040810135906060013561017f565b005b6100846004803603608081101561009c57600080fd5b5080359060ff6020820135169060408101359060600135610350565b610084600480360360c08110156100ce57600080fd5b813591602081013591810190606081016040820135602060020a8111156100f457600080fd5b82018360208201111561010657600080fd5b803590602001918460018302840111602060020a8311171561012757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050600160a060020a036020830135811692604001351690506104cb565b6040805160008152602080820180845230905260ff8616828401526060820185905260808201849052915173CED6Cec7891276E58d9434426831709fcBdD0C499260019260a080820193601f1981019281900390910190855afa1580156101ea573d6000803e3d6000fd5b50505060206040510351600160a060020a031614151561024f576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a08231028152306004820181905291518692600160a060020a0384169263a9059cbb9284916370a08231916024808301926020929190829003018186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d60208110156102ce57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b505050506040513d602081101561034757600080fd5b50505050505050565b604080516000815260208082018084523060a060020a890217905260ff8616828401526060820185905260808201849052915173CED6Cec7891276E58d9434426831709fcBdD0C499260019260a081810193601f1981019281900390910190855afa1580156103c3573d6000803e3d6000fd5b50505060206040510351600160a060020a0316141515610428576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a63a9059cbb028152730ef9b53e6f48daeb11fd57c10afd58fe96bb2be160048201526024810186905290517306FA036B7E1CF38FeB7c362Fe5ae3b05455B5c5a9163a9059cbb9160448083019260209291908290030181600087803b15801561049957600080fd5b505af11580156104ad573d6000803e3d6000fd5b505050506040513d60208110156104c357600080fd5b505050505050565b81816104d5610d8c565b604080516080810180835260e160020a6331a9108f029052608481018b905290518190600160a060020a03861690636352211e9060a480850191602091818703018186803b15801561052657600080fd5b505afa15801561053a573d6000803e3d6000fd5b505050506040513d602081101561055057600080fd5b5051600160a060020a03908116825260006020838101919091526040805160e060020a6337ebbc03028152600481018f905281519190940193928816926337ebbc03926024808301939192829003018186803b1580156105af57600080fd5b505afa1580156105c3573d6000803e3d6000fd5b505050506040513d60208110156105d957600080fd5b50518152600060209091015290506105ef610d8c565b604080516080810180835260e160020a6331a9108f0290526084810189905290518190600160a060020a03861690636352211e9060a480850191602091818703018186803b15801561064057600080fd5b505afa158015610654573d6000803e3d6000fd5b505050506040513d602081101561066a57600080fd5b5051600160a060020a03908116825260006020838101919091526040805160e060020a6337ebbc03028152600481018d905281519190940193928816926337ebbc03926024808301939192829003018186803b1580156106c957600080fd5b505afa1580156106dd573d6000803e3d6000fd5b505050506040513d60208110156106f357600080fd5b50518152600060209091015280518351919250600160a060020a0390811691161415610769576040805160e560020a62461bcd02815260206004820152601a60248201527f63616e206e6f742074726164652077697468206f6e6573656c66000000000000604482015290519081900360640190fd5b604082015173BD5abfB956641B75f6A8d719acF317c93ac38673907306FA036B7E1CF38FeB7c362Fe5ae3b05455B5c5a908b0363ffffffff16600081116107eb576040805160e560020a62461bcd02815260206004820152600b602482015260a860020a6a656d70747920747261646502604482015290519081900360640190fd5b66038d7ea4c680008102606086018190526703782dace9d900001015610851576040805160e560020a62461bcd0281526020600482015260106024820152608160020a6f34b73b30b634b21032b6b4b9b9b4b7b702604482015290519081900360640190fd5b6040850151602060020a90819004908d040360008111156108c857600181146108ba576040805160e560020a62461bcd0281526020600482015260106024820152608260020a6f1a5b98dbdc9c9958dd081cda59db985b02604482015290519081900360640190fd5b606482600160208901520491505b87600160a060020a03166336c9c4578f8f8f6040518463ffffffff1660e060020a0281526004018084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561093557818101518382015260200161091d565b50505050905090810190601f1680156109625780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561098357600080fd5b505af1158015610997573d6000803e3d6000fd5b505086516040805160e160020a636eb1769f028152600160a060020a039283166004820152306024820152905160009450918816925063dd62ed3e916044808301926020929190829003018186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d6020811015610a1c57600080fd5b50511160208681019190915286015180610a37575084602001515b610a415781610a46565b606482025b60608601819052604080870151815160e060020a63a983d43f028152600481018f90529201602483015251600160a060020a0389169163a983d43f91604480830192600092919082900301818387803b158015610aa257600080fd5b505af1158015610ab6573d6000803e3d6000fd5b50505060608601805166038d7ea4c68000908102909152600060408901528751930292600160a060020a038616915063a9059cbb90610af6858a8a610d1c565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b505050506040513d6020811015610b7257600080fd5b50508451600160a060020a0385169063a9059cbb90610b9285898b610d1c565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b505050506040513d6020811015610c0e57600080fd5b5050606080860151908701516040805160e060020a63a9059cbb028152730ef9b53e6f48daeb11fd57c10afd58fe96bb2be160048201529190920160248201529051600160a060020a0385169163a9059cbb9160448083019260209291908290030181600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505050506040513d6020811015610cac57600080fd5b50508451865160208089015181890151604080519215158352901515928201929092528151600160a060020a0394851694909316927f2d476ce15822194d3b3e6deb5bb7edd748b0f8ac84d26685f9d2991220c40b4f929181900390910190a35050505050505050505050505050565b6000839050816060015183606001511115610d375750600a83025b816060015183606001511415610d82578383606001511415610d595750600383025b816020015115158360200151151514158015610d7757506040830151155b15610d825750600a83025b6032029392505050565b6040805160808101825260008082526020820181905291810182905260608101919091529056fea165627a7a72305820c35f51757c326ca289e2fcdcab7cbde4fd154e8dca30256194a96be34a6977770029';
const scriptBuf = Buffer.from(earth.code.replace("0x", ""), "hex");
const factor18 = bi("1000000000000000000");

const provider = new LeapProvider(CONFIG.provider);
const wallet = new ethers.Wallet(CONFIG.priv).connect(provider);
const plasma = new LeapEthers(provider);
const contractAddress = bufferToHex(ripemd160(scriptBuf));
const GAS_COST = bi(7001310);

const consolidate = async () => {
  const colors = await plasma.getColors();
  const gasTokenAddress = colors[0];
  const tokenAddr = colors[CONFIG.color];

  console.log("Contract address:", contractAddress);
  console.log("GAS token:", gasTokenAddress, 0);
  console.log("Token to consolidate:", tokenAddr, CONFIG.color);

  const utxos = await plasma.getUnspent(contractAddress, CONFIG.color);
  console.log("UTXOs:", utxos.length);
  const dustUtxos = utxos.filter(u =>
    lessThan(bi(u.value), multiply(bi(20), factor18))
  );
  console.log("UTXOs to consolidate:", dustUtxos.length);

  const gasToken = new ethers.Contract(gasTokenAddress, erc20ABI, plasma.provider);
  const gasBalance = bi(await gasToken.balanceOf(contractAddress));
  if (lessThan(gasBalance, GAS_COST)) {
    throw new Error(
      `Not enough gas for consolidationg. Need: ${GAS_COST}, balance: ${gasBalance}`
    );
  }
  const gasUtxos = await plasma.getUnspent(contractAddress, 0);

  const tokenInputs = dustUtxos.map(u => {
    console.log("utxo", u);
    return new Input({ prevout: u.outpoint });
  });

  const inputs = [
    new Input({ prevout: gasUtxos[0].outpoint, script: scriptBuf }),
    ...tokenInputs
  ];

  const amount = dustUtxos.reduce((a, v) => add(a, bi(v.output.value)), bi(0));

  const outputs = [
    new Output(amount.toString(), contractAddress, CONFIG.color),
    new Output(subtract(bi(gasUtxos[0].output.value), GAS_COST).toString(), contractAddress, 0)
  ];

  console.log(outputs);

  let condition = Tx.spendCond(inputs, outputs);

  const getMsgData = tx => {
    const { v, r, s } = tx.getConditionSig(CONFIG.priv);
    const abi = [
      {
        constant: false,
        inputs: [
          {
            name: 'token',
            type: 'address',
          },
          {
            name: 'v',
            type: 'uint8',
          },
          {
            name: 'r',
            type: 'bytes32',
          },
          {
            name: 's',
            type: 'bytes32',
          },
        ],
        name: 'consolidate',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
    ];
    const methodSig =
      keccak256(
        `${abi[0].name}(${abi[0].inputs.map(i => i.type).join(',')})`
      )
      .toString('hex')
      .substr(0, 8);
    const params = ethers.utils.defaultAbiCoder.encode(abi[0].inputs, [
        tokenAddr,
      v,
      r,
      s,
    ]);
    return `0x${methodSig}${params.substring(2)}`;
  };

  const { v, r, s } = condition.getConditionSig(CONFIG.priv);
  const earthContract = new ethers.Contract(contractAddress, earth.abi, plasma.provider);
  const msgData = getMsgData(condition);
  console.log(msgData);
  condition.inputs[0].setMsgData(msgData);

    console.log(condition);
    const rsp = await plasma.provider.send("checkSpendingCondition", [condition.hex()]);
    if (rsp.error) {
        console.error(rsp);
        console.log('🛑');
        return;
    }
    const txHash = await plasma.provider.send('eth_sendRawTransaction', [condition.hex()]);
    console.log(`https://testnet.leapdao.org/explorer/tx/${txHash}`);
    console.log('✅');

};

consolidate();
